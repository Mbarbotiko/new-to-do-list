{"version":3,"sources":["components/ToDoItem.js","components/Tooltip.js","components/SubmitButton.js","components/ToDoInput.js","components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDoItem","props","onClick","edit","item","removeItem","Tooltip","className","isActive","alertText","SubmitButton","submitClick","submitText","ToDoInput","state","inputValue","tooltip","handleChange","event","setState","target","value","length","handleSubmit","preventDefault","onSubmit","id","shortid","generate","type","placeholder","this","onChange","React","Component","ToDoList","toDoItems","JSON","parse","localStorage","getItem","submitToDoItem","addToDoItem","setItem","stringify","removeLocalStorage","removeToDoItem","filter","todo","console","log","forgetListButton","map","key","bind","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3f98fbbb.chunk.js","sourcesContent":["import React from 'react';\n//https://reactjs.org/docs/fragments.html';\n\nconst ToDoItem = (props) => {\n\n    return (\n\n        // <></>\n        <div>\n            <li onClick={props.edit}>{props.item}</li><button onClick={props.removeItem}>X</button>\n        </div>\n\n    )\n\n}\n\nexport default ToDoItem;","import React from 'react';\n\nconst Tooltip = (props) => {\n    return (\n        <>\n            <span className={`Tooltip ` + props.isActive}\n            >{props.alertText}</span>\n\n        </>\n    )\n\n}\n\nexport default Tooltip;","import React from 'react';\n\nconst SubmitButton = (props) => {\n    return (\n        <>\n            <button\n                className='SubmitButton'\n                onClick={props.submitClick\n                }>{props.submitText}</button>\n        </>\n    )\n}\n\nexport default SubmitButton;","import React from 'react';\nimport shortid from 'shortid';\nimport Tooltip from './Tooltip';\nimport SubmitButton from './SubmitButton';\n\n\nclass ToDoInput extends React.Component {\n    state = {\n        inputValue: '',\n        tooltip: 'invisible'\n    }\n    handleChange = (event) => {\n        this.setState({\n            inputValue: event.target.value\n        })\n        if (event.target.value.length > 0 && this.state.tooltip === 'visible') {\n            this.setState({\n\n                tooltip: 'invisible'\n            })\n\n        }\n    }\n    handleSubmit = (event) => {\n        event.preventDefault();\n        if (this.state.inputValue.length > 0) {\n            this.props.onSubmit({\n                id: shortid.generate(),\n                inputValue: this.state.inputValue\n            })\n            this.setState({\n                inputValue: ''\n\n            })\n            if (this.state.tooltip === 'visible') {\n                this.setState({\n\n                    tooltip: 'invisible'\n                })\n\n            }\n        } else {\n            //add tool tip here later instead\n            // alert('You need to enter something....')\n            this.setState({\n                tooltip: 'visible'\n            })\n\n\n        }\n    }\n\n    render() {\n        return (\n            <div className='Input' >\n                <form>\n                    <input\n                        type='text'\n                        placeholder='What to do?'\n                        value={this.state.inputValue}\n                        onChange={this.handleChange}\n                    ></input>\n                    {/* <button onClick={this.handleSubmit}\n                    \n\n                    >Add to List</button> */}\n                    <SubmitButton submitText = 'Add to List (test)'\n                    submitClick={this.handleSubmit}/>\n                </form>\n                <Tooltip\n                    isActive={this.state.tooltip}\n                    alertText='You need to enter something'\n\n                />\n            </div>\n        )\n\n    }\n}\nexport default ToDoInput;","import React from 'react';\nimport ToDoItem from './ToDoItem';\nimport ToDoInput from './ToDoInput';\nimport SubmitButton from './SubmitButton';\n//add a tool tip to the handle submit event\n//add ability to edit the current to do's displayed, onclick of the LI display an input that updates only that component, onClick= props.edit\n//style this with sass, add to portfolio and move onto another project\n\n\nclass ToDoList extends React.Component {\n\n    state = {\n        toDoItems: JSON.parse(localStorage.getItem('ToDoList')) || []\n    }\n    submitToDoItem = (addToDoItem) => {\n        const toDoItems = [addToDoItem, ...this.state.toDoItems];\n        this.setState({\n            toDoItems,\n        })\n        localStorage.setItem('ToDoList', JSON.stringify(toDoItems));\n    }\n\n    removeLocalStorage = () => {\n        localStorage.removeItem('ToDoList');\n        this.setState({\n            toDoItems: []\n        })\n    }\n\n    //if no arrow function, use bind(this) in the onClick, otherwise its not needed because arrow function binds this automatically.\n    //   removeLocalStorage(){\n    //         localStorage.removeItem('ToDoList');\n    //         this.setState({\n    //             toDoItems: []\n    //         })\n    //     }\n\n\n    // removeToDoItem = (id) => {\n    //     let toDoItems = [];\n    //     this.state.toDoItems.forEach(todo => {\n    //         if (todo.id !== id) {\n    //             toDoItems.push(todo);\n    //         }\n    //     })\n    //     this.setState({\n    //         toDoItems,\n    //     })\n    // }\n\n    removeToDoItem = (id) => {\n        const toDoItems = this.state.toDoItems.filter(todo => todo.id !== id)\n        this.setState({\n            toDoItems,\n        })\n        localStorage.setItem('ToDoList', JSON.stringify(toDoItems));\n    }\n    render() {\n        console.log(this.state.toDoItems.length)\n        //conditional rendering and assigning a component to a variable\n        let forgetListButton = null;\n        if (this.state.toDoItems.length > 0) {\n            forgetListButton = <SubmitButton submitClick={this.removeLocalStorage}\n                submitText='Forget my list' />\n        }\n        return (\n\n            <div>\n                <ul className='List'>\n                    <h3>My to do's</h3>\n                    {this.state.toDoItems.map(todo => (\n                        <ToDoItem\n                            key={todo.id}\n                            item={todo.inputValue}\n                            //must bind when passing arguments\n                            //https://reactjs.org/docs/handling-events.html\n                            removeItem={this.removeToDoItem.bind(this, (todo.id))}\n                        />\n                    ))\n                    }\n                </ul>\n                <ToDoInput onSubmit={this.submitToDoItem} />\n                {/* <button onClick={this.removeLocalStorage}>Forget My List</button> */}\n                {forgetListButton}\n            </div>\n        )\n    }\n}\n\nexport default ToDoList;","import React from 'react';\nimport './App.css';\nimport ToDoList from './components/ToDoList';\n\n\n\nclass App extends React.Component {\n\n\n\n\n  render() {\n\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>To Do List</h1>\n        </header>\n        <ToDoList />\n\n\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nif(module.hot){\n  module.hot.accept();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
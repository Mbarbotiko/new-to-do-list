{"version":3,"sources":["components/ToDoItem.js","components/ToDoInput.js","components/ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["ToDoItem","props","item","ToDoInput","state","inputValue","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","onSubmit","id","shortid","generate","className","placeholder","this","onChange","onClick","React","Component","ToDoList","toDoItems","submitToDoItem","addToDoItem","console","log","map","todo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oSAmBeA,EAhBE,SAACC,GAEd,OAEI,6BACI,4BAAKA,EAAMC,MAAU,uC,uBC6ClBC,E,4MAjDXC,MAAQ,CACJC,WAAY,I,EAIhBC,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,S,EAM1CC,aAAe,SAACL,GACZA,EAAMM,iBACN,EAAKZ,MAAMa,SAAS,CAChBC,GAAIC,IAAQC,WACZZ,WAAY,EAAKD,MAAMC,aAI3B,EAAKG,SAAS,CACVH,WAAW,M,uDASf,OACI,yBAAKa,UAAU,SACX,8BACI,2BACIR,KAAK,aACLS,YAAY,cACZR,MAAOS,KAAKhB,MAAMC,WAClBgB,SAAUD,KAAKd,eAEnB,4BAAQgB,QAASF,KAAKR,cAAtB,qB,GAzCIW,IAAMC,WCiDfC,E,4MA5CXrB,MAAQ,CACJsB,UAAW,I,EAIfC,eAAiB,SAACC,GACd,IAAMF,EAAS,CAAIE,GAAJ,mBAAoB,EAAKxB,MAAMsB,YAC9C,EAAKlB,SAAS,CACVkB,e,uDAQJ,OADAG,QAAQC,IAAIV,KAAKhB,MAAMsB,WAGnB,6BACI,wBAAIR,UAAU,QACV,0CAGCE,KAAKhB,MAAMsB,UAAUK,KAAI,SAAAC,GAAI,OAE1B,kBAAC,EAAD,CACEC,IAAOD,EAAKjB,GACZb,KAAM8B,EAAK3B,iBAWrB,kBAAC,EAAD,CAAWS,SAAUM,KAAKO,sB,GAzCnBJ,IAAMC,WCkBdU,E,uKAbX,OACE,yBAAKhB,UAAU,OACb,4BAAQA,UAAU,cAChB,2CAEF,kBAAC,EAAD,W,GAXUK,IAAMC,WCQJW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.091c9d01.chunk.js","sourcesContent":["import React from 'react';\n//https://reactjs.org/docs/fragments.html';\n\nconst ToDoItem = (props) => {\n\n    return (\n        //  <React.Fragment>\n        <div>\n            <li>{props.item}</li><button>X</button>\n        </div>\n\n\n\n\n        //  </React.Fragment>\n    )\n\n}\n\nexport default ToDoItem;","import React from 'react';\nimport shortid from 'shortid';\n\nclass ToDoInput extends React.Component {\n    state = {\n        inputValue: ''\n\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n\n    }\n\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.props.onSubmit({\n            id: shortid.generate(),\n            inputValue: this.state.inputValue\n\n        })\n\n        this.setState({\n            inputValue:''\n        })\n\n      \n    }\n\n\n\n    render() {\n        return (\n            <div className='Input' >\n                <form>\n                    <input\n                        name='inputValue'\n                        placeholder='What to do?'\n                        value={this.state.inputValue}\n                        onChange={this.handleChange}\n                    ></input>\n                    <button onClick={this.handleSubmit}>Add to List</button>\n                </form>\n\n\n            </div>\n        )\n\n    }\n}\nexport default ToDoInput;","import React from 'react';\nimport ToDoItem from './ToDoItem';\nimport ToDoInput from './ToDoInput';\n\n\nclass ToDoList extends React.Component {\n\n\n    state = {\n        toDoItems: []\n\n    }\n\n    submitToDoItem = (addToDoItem) => {\n        const toDoItems = [addToDoItem, ...this.state.toDoItems];\n        this.setState({\n            toDoItems,\n        })\n\n    }\n\n    render() {\n   \n        console.log(this.state.toDoItems)\n        return (\n        \n            <div>\n                <ul className='List'>\n                    <h3>My to do's</h3>\n\n                    {\n                     this.state.toDoItems.map(todo => (\n                 \n                        <ToDoItem\n                          key = {todo.id}\n                          item={todo.inputValue}\n\n\n                        >\n\n                        </ToDoItem>\n                    ))\n                }\n\n\n                </ul>\n                <ToDoInput onSubmit={this.submitToDoItem} />\n            </div>\n        )\n    }\n}\n\nexport default ToDoList;","import React from 'react';\nimport './App.css';\nimport ToDoList from './components/ToDoList';\n\nclass App extends React.Component {\n\n\n  render() {\n\n  \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>To Do List</h1>\n        </header>\n        <ToDoList/>\n\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nif(module.hot){\n  module.hot.accept();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}